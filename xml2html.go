package main

import (
	"bufio"
	"flag"
	"fmt"
	"io"
	"os"
	"strings"
)

const (
	htmlHeader = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Converted SVG</title>
</head>
<body>
`
	htmlFooter = `
</body>
</html>
`
	xmlHeader = `<?xml version="1.0"?>
<!-- Generated by xml2html.go -->
`
)

func main() {
	decode := flag.Bool("d", false, "Decode mode")
	flag.Usage = func() {
		fmt.Fprintf(os.Stderr, "Usage: %s [-d]\n", os.Args[0])
		fmt.Fprintf(os.Stderr, "  -d    Decode mode (HTML to SVG). Default is encode mode (SVG to HTML).\n")
		fmt.Fprintf(os.Stderr, "Input is read from stdin and output is written to stdout.\n")
	}
	flag.Parse()

	var err error
	if *decode {
		err = decodeHTML(os.Stdin, os.Stdout)
	} else {
		err = encodeXML(os.Stdin, os.Stdout)
	}

	if err != nil {
		fmt.Fprintf(os.Stderr, "Error: %v\n", err)
		os.Exit(1)
	}
}

func encodeXML(r io.Reader, w io.Writer) error {
	_, err := fmt.Fprint(w, htmlHeader)
	if err != nil {
		return fmt.Errorf("error writing HTML header: %w", err)
	}

	scanner := bufio.NewScanner(r)
	var svgContent strings.Builder
	for scanner.Scan() {
		svgContent.WriteString(scanner.Text())
		svgContent.WriteString("\n")
	}

	if err := scanner.Err(); err != nil {
		return fmt.Errorf("error reading input: %w", err)
	}

	_, err = fmt.Fprint(w, svgContent.String())
	if err != nil {
		return fmt.Errorf("error writing SVG content: %w", err)
	}

	_, err = fmt.Fprint(w, htmlFooter)
	if err != nil {
		return fmt.Errorf("error writing HTML footer: %w", err)
	}

	return nil
}

func decodeHTML(r io.Reader, w io.Writer) error {
	_, err := fmt.Fprint(w, xmlHeader)
	if err != nil {
		return fmt.Errorf("error writing XML header: %w", err)
	}

	inSVG := false
	scanner := bufio.NewScanner(r)
	for scanner.Scan() {
		line := scanner.Text()
		if strings.Contains(line, "<svg") {
			inSVG = true
		}
		if inSVG {
			_, err := fmt.Fprintln(w, line)
			if err != nil {
				return fmt.Errorf("error writing SVG line: %w", err)
			}
		}
		if strings.Contains(line, "</svg>") {
			inSVG = false
		}
	}

	if err := scanner.Err(); err != nil {
		return fmt.Errorf("error reading input: %w", err)
	}

	return nil
}
